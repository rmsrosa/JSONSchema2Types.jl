# This file was programmatically generated from JSON Schemas.
# Generated on: 2025-10-04T13:39:49.549
# Do not edit this file directly.

using Dates, URIs, UUIDs

"""
    Customer


    Fields:
    `name`: The customer's full name.
    `id`: The unique identifier for the customer.
    `email`: The customer's email address.
"""
struct Customer
    name::String
    id::Int64
    email::Union{Nothing, String}

    function Customer(;name, id, email)
        if !isnothing(email)
            @assert occursin(Regex("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}\$"), email) "`email` must match the required pattern"
        end
        return new(name, id, email)
    end
end


"""
    OrderItems

"""
struct OrderItems
    productId::String
    quantity::Int64

    function OrderItems(;productId, quantity)
        return new(productId, quantity)
    end
end


"""
    Order

"""
struct Order
    items::Vector{OrderOrderItems}
    # Depends on Customer from customer_schema.json
    customer::Customer
    orderId::String

    function Order(;items, customer, orderId)
        return new(items, customer, orderId)
    end
end


