# This file was programmatically generated from JSON Schemas.
# Generated on: 2025-10-04T13:39:52.033
# Do not edit this file directly.

using Dates, URIs, UUIDs

"""
    BoilProcedureType

    BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil.
"""
struct BoilProcedureType
    name::Union{Nothing, String}
    # Depends on TimeType from measureable_units.json
    boil_time::TimeType
    notes::Union{Nothing, String}
    # Depends on VolumeType from measureable_units.json
    pre_boil_size::Union{Nothing, VolumeType}
    description::Union{Nothing, String}
    boil_steps::Union{Nothing, Vector{BoilStepType}}

    function BoilProcedureType(;name, boil_time, notes, pre_boil_size, description, boil_steps)
        return new(name, boil_time, notes, pre_boil_size, description, boil_steps)
    end
end


"""
    TimingType

    The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.

    Fields:
    `duration`: How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
    `step`: Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
    `time`: What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
    `pH`: Used to indicate when an addition is added based on a desired specific gravity. eg Add brett when pH is 3.4.
    `continuous`: A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
    `specific_gravity`: Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.
"""
struct TimingType
    # Depends on TimeType from measureable_units.json
    duration::Union{Nothing, TimeType}
    step::Union{Nothing, Int64}
    # Depends on TimeType from measureable_units.json
    time::Union{Nothing, TimeType}
    use::Union{Nothing, UseType}
    # Depends on AcidityType from measureable_units.json
    pH::Union{Nothing, AcidityType}
    continuous::Union{Nothing, Bool}
    # Depends on GravityType from measureable_units.json
    specific_gravity::Union{Nothing, GravityType}

    function TimingType(;duration, step, time, use, pH, continuous, specific_gravity)
        return new(duration, step, time, use, pH, continuous, specific_gravity)
    end
end


"""
    UseType

    Differentiates the specific process type when this ingredient addition is used.
"""
struct UseType

    function UseType(;)
        return new()
    end
end


"""
    EfficiencyType

    The efficiencyType stores each efficiency component.

    Fields:
    `lauter`: The percentage of sugar that makes it from the mash tun to the kettle.
    `brewhouse`: The percentage of sugar that makes it from the grain to the fermenter.
    `mash`: The percentage of sugar that makes it from the grain to the kettle.
    `conversion`: The percentage of sugar from the grain yield that is extracted and converted during the mash.
"""
struct EfficiencyType
    # Depends on PercentType from measureable_units.json
    lauter::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    brewhouse::PercentType
    # Depends on PercentType from measureable_units.json
    mash::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    conversion::Union{Nothing, PercentType}

    function EfficiencyType(;lauter, brewhouse, mash, conversion)
        return new(lauter, brewhouse, mash, conversion)
    end
end


"""
    IngredientsType


    Fields:
    `miscellaneous_additions`: miscellaneous_additions collects all the miscellaneous items for use in a recipe
    `water_additions`: water_additions collects all the water items for use in a recipe
    `hop_additions`: hop_additions collects all the hops for use in a recipe
    `culture_additions`: culture_additions collects all the culture items for use in a recipe
    `fermentable_additions`: fermentable_additions collects all the fermentable ingredients for use in a recipe
"""
struct IngredientsType
    miscellaneous_additions::Union{Nothing, Vector{MiscellaneousAdditionType}}
    water_additions::Union{Nothing, Vector{WaterAdditionType}}
    hop_additions::Union{Nothing, Vector{HopAdditionType}}
    culture_additions::Union{Nothing, Vector{CultureAdditionType}}
    fermentable_additions::Vector{FermentableAdditionType}

    function IngredientsType(;miscellaneous_additions, water_additions, hop_additions, culture_additions, fermentable_additions)
        return new(miscellaneous_additions, water_additions, hop_additions, culture_additions, fermentable_additions)
    end
end


"""
    RecipeType

    RecipeType composes the information stored in a beerjson recipe.

    Fields:
    `fermentation`: FermentationProcedureType defines the procedure for performing fermentation.
    `batch_size`: The volume into the fermenter.
    `mash`: This defines the procedure for performing unique mashing processes.
    `packaging`: Describes the procedure for packaging your beverage.
    `boil`: Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil.
    `final_gravity`: The gravity of beer at the end of fermentation.
    `ibu_estimate`: Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency.
    `color_estimate`: The color of the finished beer, using SRM or EBC.
    `carbonation`: The final carbonation of the beer when packaged or served.
    `beer_pH`: The final beer pH at the end of fermentation.
    `apparent_attenuation`: The total apparent attenuation of the finished beer after fermentation.
    `efficiency`: Used to store each efficiency component, including conversion, and brewhouse.
    `taste`: Used to store subjective tasting notes, and rating.
    `ingredients`: A collection of all ingredients used for the recipe.
    `original_gravity`: The gravity of wort when transffered to the fermenter.
"""
struct RecipeType
    # Depends on FermentationProcedureType from fermentation.json
    fermentation::Union{Nothing, FermentationProcedureType}
    # Depends on VolumeType from measureable_units.json
    batch_size::VolumeType
    # Depends on PercentType from measureable_units.json
    alcohol_by_volume::Union{Nothing, PercentType}
    # Depends on MashProcedureType from mash.json
    mash::Union{Nothing, MashProcedureType}
    # Depends on PackagingProcedureType from packaging.json
    packaging::Union{Nothing, PackagingProcedureType}
    name::String
    author::String
    # Depends on BoilProcedureType from boil.json
    boil::Union{Nothing, BoilProcedureType}
    # Depends on GravityType from measureable_units.json
    final_gravity::Union{Nothing, GravityType}
    notes::Union{Nothing, String}
    # Depends on DateType from measureable_units.json
    created::Union{Nothing, DateType}
    # Depends on IBUEstimateType from hop.json
    ibu_estimate::Union{Nothing, IBUEstimateType}
    calories_per_pint::Union{Nothing, Float64}
    # Depends on ColorType from measureable_units.json
    color_estimate::Union{Nothing, ColorType}
    # Depends on RecipeStyleType from style.json
    style::Union{Nothing, RecipeStyleType}
    carbonation::Union{Nothing, Float64}
    # Depends on AcidityType from measureable_units.json
    beer_pH::Union{Nothing, AcidityType}
    coauthor::Union{Nothing, String}
    # Depends on PercentType from measureable_units.json
    apparent_attenuation::Union{Nothing, PercentType}
    efficiency::EfficiencyType
    taste::Union{Nothing, TasteType}
    ingredients::IngredientsType
    # Depends on GravityType from measureable_units.json
    original_gravity::Union{Nothing, GravityType}
    type::String

    function RecipeType(;fermentation, batch_size, alcohol_by_volume, mash, packaging, name, author, boil, final_gravity, notes, created, ibu_estimate, calories_per_pint, color_estimate, style, carbonation, beer_pH, coauthor, apparent_attenuation, efficiency, taste, ingredients, original_gravity, type)
        return new(fermentation, batch_size, alcohol_by_volume, mash, packaging, name, author, boil, final_gravity, notes, created, ibu_estimate, calories_per_pint, color_estimate, style, carbonation, beer_pH, coauthor, apparent_attenuation, efficiency, taste, ingredients, original_gravity, type)
    end
end


"""
    TasteType

"""
struct TasteType
    rating::Float64
    notes::String

    function TasteType(;rating, notes)
        return new(rating, notes)
    end
end


"""
    StyleCategories

"""
struct StyleCategories

    function StyleCategories(;)
        return new()
    end
end


"""
    StyleBase

    The descriptive base type for both style guideline records, and recipe style provisions. Provides unique properties to identify individual styles
"""
struct StyleBase
    name::String
    category_number::Union{Nothing, Int64}
    style_letter::Union{Nothing, String}
    style_guide::String
    category::String
    type::StyleCategories

    function StyleBase(;name, category_number, style_letter, style_guide, category, type)
        if !isnothing(style_letter)
            @assert occursin(Regex("[A-Z ]"), style_letter) "`style_letter` must match the required pattern"
        end
        return new(name, category_number, style_letter, style_guide, category, type)
    end
end


"""
    RecipeStyleType

    RecipeStyleType defines style information stored in a recipe record
"""
struct RecipeStyleType

    function RecipeStyleType(;)
        return new()
    end
end


"""
    StyleType

    StyleType provide information for Style categorization
"""
struct StyleType
    aroma::Union{Nothing, String}
    # Depends on BitternessRangeType from measureable_units.json
    international_bitterness_units::Union{Nothing, BitternessRangeType}
    appearance::Union{Nothing, String}
    flavor::Union{Nothing, String}
    # Depends on CarbonationRangeType from measureable_units.json
    carbonation::Union{Nothing, CarbonationRangeType}
    overall_impression::Union{Nothing, String}
    # Depends on PercentRangeType from measureable_units.json
    alcohol_by_volume::Union{Nothing, PercentRangeType}
    mouthfeel::Union{Nothing, String}
    examples::Union{Nothing, String}
    # Depends on GravityRangeType from measureable_units.json
    final_gravity::Union{Nothing, GravityRangeType}
    notes::Union{Nothing, String}
    # Depends on ColorRangeType from measureable_units.json
    color::Union{Nothing, ColorRangeType}
    # Depends on GravityRangeType from measureable_units.json
    original_gravity::Union{Nothing, GravityRangeType}
    ingredients::Union{Nothing, String}

    function StyleType(;aroma, international_bitterness_units, appearance, flavor, carbonation, overall_impression, alcohol_by_volume, mouthfeel, examples, final_gravity, notes, color, original_gravity, ingredients)
        return new(aroma, international_bitterness_units, appearance, flavor, carbonation, overall_impression, alcohol_by_volume, mouthfeel, examples, final_gravity, notes, color, original_gravity, ingredients)
    end
end


"""
    MiscellaneousInventoryType

"""
struct MiscellaneousInventoryType
    amount::Union{VolumeType, MassType, UnitType}

    function MiscellaneousInventoryType(;amount)
        return new(amount)
    end
end


"""
    MiscellaneousBase

    MiscellaneousBase provides unique properties to identify individual records of ingredients that are neither hops, nor provide a contribution to the gravity of wort.
"""
struct MiscellaneousBase
    product_id::Union{Nothing, String}
    name::String
    producer::Union{Nothing, String}
    type::String

    function MiscellaneousBase(;product_id, name, producer, type)
        return new(product_id, name, producer, type)
    end
end


"""
    MiscellaneousAdditionType

    MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe.

    Fields:
    `timing`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
"""
struct MiscellaneousAdditionType
    # Depends on TimingType from timing.json
    timing::Union{Nothing, TimingType}
    amount::Union{VolumeType, MassType, UnitType}

    function MiscellaneousAdditionType(;timing, amount)
        return new(timing, amount)
    end
end


"""
    MiscellaneousType

    MiscellaneousType collects the attributes of an ingredient to store as record information.

    Fields:
    `use_for`: Used to describe the purpose of the miscellaneous ingredient, e.g. whirlfloc is used for clarity.
"""
struct MiscellaneousType
    use_for::Union{Nothing, String}
    notes::Union{Nothing, String}
    inventory::Union{Nothing, MiscellaneousInventoryType}

    function MiscellaneousType(;use_for, notes, inventory)
        return new(use_for, notes, inventory)
    end
end


"""
    BoilStepType

    BoilStepType - a per step representation of a boil process, can be used to support preboil steps, non-boiling pasteurization steps, boiling, whirlpool steps, and chilling.

    Fields:
    `chilling_type`: Chilling type seperates batch chilling, eg immersion chillers, where the entire volume of wort is brought down in temperture as a whole, vs inline chilling where the wort is chilled while it is being drained, which can leave a significant amount of hop isomerization occuring in the boil kettle.
    `ramp_time`: The amount of time that passes before this step begins. eg moving from a boiling step (step 1) to a whirlpool step (step 2) may take 5 minutes. Step 2 would have a ramp time of 5 minutes, hop isomerization and bitterness calculations will need to account for this accordingly.
"""
struct BoilStepType
    chilling_type::Union{Nothing, String}
    name::String
    # Depends on GravityType from measureable_units.json
    end_gravity::Union{Nothing, GravityType}
    description::Union{Nothing, String}
    # Depends on TemperatureType from measureable_units.json
    start_temperature::Union{Nothing, TemperatureType}
    # Depends on GravityType from measureable_units.json
    start_gravity::Union{Nothing, GravityType}
    # Depends on TemperatureType from measureable_units.json
    end_temperature::Union{Nothing, TemperatureType}
    # Depends on TimeType from measureable_units.json
    ramp_time::Union{Nothing, TimeType}
    # Depends on AcidityType from measureable_units.json
    end_ph::Union{Nothing, AcidityType}
    # Depends on AcidityType from measureable_units.json
    start_ph::Union{Nothing, AcidityType}
    # Depends on TimeType from measureable_units.json
    step_time::Union{Nothing, TimeType}

    function BoilStepType(;chilling_type, name, end_gravity, description, start_temperature, start_gravity, end_temperature, ramp_time, end_ph, start_ph, step_time)
        return new(chilling_type, name, end_gravity, description, start_temperature, start_gravity, end_temperature, ramp_time, end_ph, start_ph, step_time)
    end
end


"""
    FermentableBase

    FermentableBase provides unique properties to identify individual records of fermentable ingredients.
"""
struct FermentableBase
    product_id::Union{Nothing, String}
    name::String
    yield::YieldType
    grain_group::Union{Nothing, String}
    producer::Union{Nothing, String}
    # Depends on ColorType from measureable_units.json
    color::ColorType
    type::String
    origin::Union{Nothing, String}

    function FermentableBase(;product_id, name, yield, grain_group, producer, color, type, origin)
        return new(product_id, name, yield, grain_group, producer, color, type, origin)
    end
end


"""
    YieldType

    The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types.

    Fields:
    `fine_coarse_difference`: The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%.
    `potential`: The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
    `fine_grind`: Percentage yield compared to succrose of a fine grind. eg 80%
    `coarse_grind`: Percentage yield compared to succrose of a coarse grind. eg 78%
"""
struct YieldType
    # Depends on PercentType from measureable_units.json
    fine_coarse_difference::Union{Nothing, PercentType}
    # Depends on GravityType from measureable_units.json
    potential::Union{Nothing, GravityType}
    # Depends on PercentType from measureable_units.json
    fine_grind::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    coarse_grind::Union{Nothing, PercentType}

    function YieldType(;fine_coarse_difference, potential, fine_grind, coarse_grind)
        return new(fine_coarse_difference, potential, fine_grind, coarse_grind)
    end
end


"""
    FermentableInventoryType

"""
struct FermentableInventoryType
    amount::Union{Nothing, Union{VolumeType, MassType}}

    function FermentableInventoryType(;amount)
        return new(amount)
    end
end


"""
    FermentableType

    FermentableType collects the attributes of a fermentable ingredient to store as record information.

    Fields:
    `protein`: The percentage of protein. Higher values may indicate a possibility of haze, or lautering issues.
    `friability`: Friability is the measure of a malts ability to crumble during the crush, and is used as an indicator for easy gelatinization of the grain and starches, as well as modification of the malt. Value of 85% of higher indicates a well modified malt and is suitable for single step mashes. Lower values may require a step mash.
    `plump`: The percentage of grain that masses through sieves with gaps of 7/64 and 6/64, desired values of 80% or higher which indicate plump kernels.
    `alpha_amylase`: Where diastatic power gives the total amount of all enzymes, alpha amylase, also known as dextrinizing units, refers to only the total amount of alpa amylase in the malted grain. A value of 25-50 is desirable for base malt.
    `dms_p`: The amount of DMS precursors, namely S-methyl methionine (SMM) and dimethyl sulfoxide (DMSO) in the malt which convert to dimethyl sulfide (DMS).
    `di_ph`: The pH of the resultant wort for 1 lb of grain mashed in 1 gallon of distilled water. Used in many water chemistry / mash pH prediction software.
    `beta_glucan`: Values of 180 or more may suggest a glucan rest and avoiding fly sparging.
    `glassy`: Used to indicate the 'crystallized' percentage of starches for crystal malts.
    `thru`: The Percentage of grain that makes it through a thin mesh screen, typically 5/64 inch. Values less than 3% are desired.
    `diastatic_power`: Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable.
    `viscosity`: The measure of wort viscosity, typically associated with the breakdown of beta-glucans. The higher the viscosity, the greater the need for a glucan rest and the less suitable for a fly sparge.
    `recommend_mash`: True if the fermentable must be mashed, false if it can be steeped. 
    `mealy`: The opposite of glassy, a mealy kernel is one that is not glassy. Base malt should be at least 90%, single step mashes generally require 95% or higher.
    `fan`: Free Amino Nitrogen (FAN) is a critical yeast nutrient. Typical values for base malt is 170.
    `kolbach_index`: The Kolbach Index, also known as soluble to total ratio of nitrogen or protein, is used to indcate the degree of malt modification. A value above 35% is desired for simple single infusion mashing, undermodified malt may require multiple step mashes or decoction.
    `fermentability`: Fermentability - Used in Extracts to indicate a baseline typical apparent attenuation for a typical medium attenuation yeast.
    `max_in_batch`: The recommended maximum percentage to use in a grain bill. 
"""
struct FermentableType
    # Depends on PercentType from measureable_units.json
    protein::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    friability::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    plump::Union{Nothing, PercentType}
    alpha_amylase::Union{Nothing, Float64}
    # Depends on PercentType from measureable_units.json
    moisture::Union{Nothing, PercentType}
    # Depends on ConcentrationType from measureable_units.json
    dms_p::Union{Nothing, ConcentrationType}
    # Depends on AcidityType from measureable_units.json
    di_ph::Union{Nothing, AcidityType}
    # Depends on ConcentrationType from measureable_units.json
    beta_glucan::Union{Nothing, ConcentrationType}
    # Depends on PercentType from measureable_units.json
    glassy::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    half::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    thru::Union{Nothing, PercentType}
    # Depends on DiastaticPowerType from measureable_units.json
    diastatic_power::Union{Nothing, DiastaticPowerType}
    # Depends on ViscosityType from measureable_units.json
    viscosity::Union{Nothing, ViscosityType}
    notes::Union{Nothing, String}
    recommend_mash::Union{Nothing, Bool}
    inventory::Union{Nothing, FermentableInventoryType}
    # Depends on PercentType from measureable_units.json
    mealy::Union{Nothing, PercentType}
    # Depends on ConcentrationType from measureable_units.json
    fan::Union{Nothing, ConcentrationType}
    kolbach_index::Union{Nothing, Float64}
    # Depends on PercentType from measureable_units.json
    fermentability::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    max_in_batch::Union{Nothing, PercentType}

    function FermentableType(;protein, friability, plump, alpha_amylase, moisture, dms_p, di_ph, beta_glucan, glassy, half, thru, diastatic_power, viscosity, notes, recommend_mash, inventory, mealy, fan, kolbach_index, fermentability, max_in_batch)
        return new(protein, friability, plump, alpha_amylase, moisture, dms_p, di_ph, beta_glucan, glassy, half, thru, diastatic_power, viscosity, notes, recommend_mash, inventory, mealy, fan, kolbach_index, fermentability, max_in_batch)
    end
end


"""
    FermentableAdditionType

    FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill.

    Fields:
    `timing`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
"""
struct FermentableAdditionType
    # Depends on TimingType from timing.json
    timing::Union{Nothing, TimingType}
    amount::Union{VolumeType, MassType}

    function FermentableAdditionType(;timing, amount)
        return new(timing, amount)
    end
end


"""
    CultureInventoryType

"""
struct CultureInventoryType
    # Depends on VolumeType from measureable_units.json
    culture::Union{Nothing, VolumeType}
    # Depends on VolumeType from measureable_units.json
    liquid::Union{Nothing, VolumeType}
    # Depends on MassType from measureable_units.json
    dry::Union{Nothing, MassType}
    # Depends on VolumeType from measureable_units.json
    slant::Union{Nothing, VolumeType}

    function CultureInventoryType(;culture, liquid, dry, slant)
        return new(culture, liquid, dry, slant)
    end
end


"""
    CultureInformation

    CultureInformation collects the attributes of a microbial culture.

    Fields:
    `best_for`: Recommended styles for a particular culture.
    `pof`: A POF+ culture is capable of producing phenols, which is a common distinctive property of saison, and brett yeasts.
    `flocculation`: Floculation refers to the ability of yeast to aggregate to form large flocs which drop out of suspension.
    `alcohol_tolerance`: The recommended limit of abv by the culture producer before attenuation stops.
    `temperature_range`: The recommended temperature range of fermentation by the culture producer.
    `max_reuse`: Maximum number of times to reuse a culture before a new lab source is recommended.
    `glucoamylase`: A glucoamylase positive culture is capable of producing glucoamylase, the enzyme produced through expression of the diastatic gene, which allows yeast to attenuate dextrins and starches leading to a very low FG. This is positive in some saison/brett yeasts as well as the new gulo hybrid by Omega yeast labs.
"""
struct CultureInformation
    best_for::Union{Nothing, String}
    pof::Union{Nothing, Bool}
    # Depends on QualitativeRangeType from measureable_units.json
    flocculation::Union{Nothing, QualitativeRangeType}
    # Depends on PercentType from measureable_units.json
    alcohol_tolerance::Union{Nothing, PercentType}
    # Depends on TemperatureRangeType from measureable_units.json
    temperature_range::Union{Nothing, TemperatureRangeType}
    max_reuse::Union{Nothing, Int64}
    notes::Union{Nothing, String}
    zymocide::Union{Nothing, Zymocide}
    glucoamylase::Union{Nothing, Bool}
    inventory::Union{Nothing, CultureInventoryType}
    # Depends on PercentRangeType from measureable_units.json
    attenuation_range::Union{Nothing, PercentRangeType}

    function CultureInformation(;best_for, pof, flocculation, alcohol_tolerance, temperature_range, max_reuse, notes, zymocide, glucoamylase, inventory, attenuation_range)
        return new(best_for, pof, flocculation, alcohol_tolerance, temperature_range, max_reuse, notes, zymocide, glucoamylase, inventory, attenuation_range)
    end
end


"""
    Zymocide

    Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral.
"""
struct Zymocide
    no1::Union{Nothing, Bool}
    no28::Union{Nothing, Bool}
    no2::Union{Nothing, Bool}
    klus::Union{Nothing, Bool}
    neutral::Union{Nothing, Bool}

    function Zymocide(;no1, no28, no2, klus, neutral)
        return new(no1, no28, no2, klus, neutral)
    end
end


"""
    CultureBase

    Provides unique properties to identify individual records of a culture.
"""
struct CultureBase
    product_id::Union{Nothing, String}
    name::String
    producer::Union{Nothing, String}
    type::String
    form::String

    function CultureBase(;product_id, name, producer, type, form)
        return new(product_id, name, producer, type, form)
    end
end


"""
    CultureAdditionType

    CultureAdditionType collects the attributes of each culture ingredient for use in a recipe.

    Fields:
    `timing`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
    `attenuation`: The expected, or measured apparent attenuation for a given culture in a given recipe. In comparison to attenuation range, this is a single value.
"""
struct CultureAdditionType
    # Depends on TimingType from timing.json
    timing::Union{Nothing, TimingType}
    amount::Union{VolumeType, MassType, UnitType}
    times_cultured::Union{Nothing, Int64}
    # Depends on PercentType from measureable_units.json
    attenuation::Union{Nothing, PercentType}
    cell_count_billions::Union{Nothing, Int64}

    function CultureAdditionType(;timing, amount, times_cultured, attenuation, cell_count_billions)
        return new(timing, amount, times_cultured, attenuation, cell_count_billions)
    end
end


"""
    WaterBase

    WaterBase provides unique properties to identify individual records of  brewing water.
"""
struct WaterBase
    # Depends on ConcentrationType from measureable_units.json
    bicarbonate::ConcentrationType
    # Depends on ConcentrationType from measureable_units.json
    magnesium::ConcentrationType
    # Depends on ConcentrationType from measureable_units.json
    sodium::ConcentrationType
    # Depends on ConcentrationType from measureable_units.json
    iron::Union{Nothing, ConcentrationType}
    name::String
    # Depends on ConcentrationType from measureable_units.json
    nitrate::Union{Nothing, ConcentrationType}
    # Depends on ConcentrationType from measureable_units.json
    nitrite::Union{Nothing, ConcentrationType}
    # Depends on ConcentrationType from measureable_units.json
    sulfate::ConcentrationType
    # Depends on ConcentrationType from measureable_units.json
    calcium::ConcentrationType
    producer::Union{Nothing, String}
    # Depends on ConcentrationType from measureable_units.json
    carbonate::Union{Nothing, ConcentrationType}
    # Depends on ConcentrationType from measureable_units.json
    chloride::ConcentrationType
    # Depends on ConcentrationType from measureable_units.json
    flouride::Union{Nothing, ConcentrationType}
    # Depends on ConcentrationType from measureable_units.json
    potassium::Union{Nothing, ConcentrationType}

    function WaterBase(;bicarbonate, magnesium, sodium, iron, name, nitrate, nitrite, sulfate, calcium, producer, carbonate, chloride, flouride, potassium)
        return new(bicarbonate, magnesium, sodium, iron, name, nitrate, nitrite, sulfate, calcium, producer, carbonate, chloride, flouride, potassium)
    end
end


"""
    WaterAdditionType

    WaterAdditionType collects the attributes of each water addition for use in a recipe
"""
struct WaterAdditionType
    # Depends on VolumeType from measureable_units.json
    amount::Union{Nothing, VolumeType}

    function WaterAdditionType(;amount)
        return new(amount)
    end
end


"""
    WaterType

    WaterType collects the attributes of a brewing water to store as record information
"""
struct WaterType
    notes::Union{Nothing, String}
    pH::Union{Nothing, Float64}

    function WaterType(;notes, pH)
        return new(notes, pH)
    end
end


"""
    FermentationProcedureType

    FermentationProcedureType defines the procedure for performing fermentation.
"""
struct FermentationProcedureType
    name::String
    fermentation_steps::Vector{FermentationStepType}
    notes::Union{Nothing, String}
    description::Union{Nothing, String}

    function FermentationProcedureType(;name, fermentation_steps, notes, description)
        return new(name, fermentation_steps, notes, description)
    end
end


"""
    MashProcedureType

    This defines the procedure for performing unique mashing processes.

    Fields:
    `grain_temperature`: Initial grain temperature prior to the start of the mash.
"""
struct MashProcedureType
    name::String
    # Depends on TemperatureType from measureable_units.json
    grain_temperature::TemperatureType
    mash_steps::Vector{MashStepType}
    notes::Union{Nothing, String}

    function MashProcedureType(;name, grain_temperature, mash_steps, notes)
        return new(name, grain_temperature, mash_steps, notes)
    end
end


"""
    VarietyInformation

    VarietyInformation collects the attributes of a hop variety to store as record information.

    Fields:
    `percent_lost`:  Defined as the percentage of hop alpha lost in 6 months of storage.
    `oil_content`: Oil Content information object.
"""
struct VarietyInformation
    # Depends on PercentType from measureable_units.json
    percent_lost::Union{Nothing, PercentType}
    notes::Union{Nothing, String}
    substitutes::Union{Nothing, String}
    oil_content::Union{Nothing, OilContentType}
    inventory::Union{Nothing, HopInventoryType}
    type::Union{Nothing, String}

    function VarietyInformation(;percent_lost, notes, substitutes, oil_content, inventory, type)
        return new(percent_lost, notes, substitutes, oil_content, inventory, type)
    end
end


"""
    HopInventoryType

"""
struct HopInventoryType
    amount::Union{Nothing, Union{VolumeType, MassType}}

    function HopInventoryType(;amount)
        return new(amount)
    end
end


"""
    OilContentType

    oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement.

    Fields:
    `total_oil_ml_per_100g`: The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.
"""
struct OilContentType
    total_oil_ml_per_100g::Union{Nothing, Float64}
    # Depends on PercentType from measureable_units.json
    myrcene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    geraniol::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    linalool::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    farnesene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    humulene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    polyphenols::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    nerol::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    cohumulone::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    limonene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    b_pinene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    xanthohumol::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    caryophyllene::Union{Nothing, PercentType}
    # Depends on PercentType from measureable_units.json
    pinene::Union{Nothing, PercentType}

    function OilContentType(;total_oil_ml_per_100g, myrcene, geraniol, linalool, farnesene, humulene, polyphenols, nerol, cohumulone, limonene, b_pinene, xanthohumol, caryophyllene, pinene)
        return new(total_oil_ml_per_100g, myrcene, geraniol, linalool, farnesene, humulene, polyphenols, nerol, cohumulone, limonene, b_pinene, xanthohumol, caryophyllene, pinene)
    end
end


"""
    IBUMethodType

"""
struct IBUMethodType

    function IBUMethodType(;)
        return new()
    end
end


"""
    HopAdditionType

    HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bil.

    Fields:
    `timing`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
"""
struct HopAdditionType
    # Depends on TimingType from timing.json
    timing::TimingType
    amount::Union{VolumeType, MassType}

    function HopAdditionType(;timing, amount)
        return new(timing, amount)
    end
end


"""
    HopVarietyBase

    HopVarietyBase provides unique properties to identify individual records of a hop variety.
"""
struct HopVarietyBase
    product_id::Union{Nothing, String}
    name::String
    # Depends on PercentType from measureable_units.json
    alpha_acid::PercentType
    year::Union{Nothing, String}
    producer::Union{Nothing, String}
    # Depends on PercentType from measureable_units.json
    beta_acid::Union{Nothing, PercentType}
    form::Union{Nothing, String}
    origin::Union{Nothing, String}

    function HopVarietyBase(;product_id, name, alpha_acid, year, producer, beta_acid, form, origin)
        return new(product_id, name, alpha_acid, year, producer, beta_acid, form, origin)
    end
end


"""
    IBUEstimateType

    Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency.
"""
struct IBUEstimateType
    method::Union{Nothing, IBUMethodType}

    function IBUEstimateType(;method)
        return new(method)
    end
end


"""
    FermentationStepType

    FermentationStepType - a per step representation of a fermentation action.

    Fields:
    `free_rise`: Free rise is used to indicate a fermentation step where the exothermic fermentation is allowed to raise the temperature without restriction This is either True or false.
"""
struct FermentationStepType
    name::String
    # Depends on GravityType from measureable_units.json
    end_gravity::Union{Nothing, GravityType}
    description::Union{Nothing, String}
    # Depends on TemperatureType from measureable_units.json
    start_temperature::Union{Nothing, TemperatureType}
    # Depends on GravityType from measureable_units.json
    start_gravity::Union{Nothing, GravityType}
    # Depends on TemperatureType from measureable_units.json
    end_temperature::Union{Nothing, TemperatureType}
    vessel::Union{Nothing, String}
    free_rise::Union{Nothing, Bool}
    # Depends on AcidityType from measureable_units.json
    end_ph::Union{Nothing, AcidityType}
    # Depends on AcidityType from measureable_units.json
    start_ph::Union{Nothing, AcidityType}
    # Depends on TimeType from measureable_units.json
    step_time::Union{Nothing, TimeType}

    function FermentationStepType(;name, end_gravity, description, start_temperature, start_gravity, end_temperature, vessel, free_rise, end_ph, start_ph, step_time)
        return new(name, end_gravity, description, start_temperature, start_gravity, end_temperature, vessel, free_rise, end_ph, start_ph, step_time)
    end
end


"""
    TemperatureUnitType

"""
struct TemperatureUnitType

    function TemperatureUnitType(;)
        return new()
    end
end


"""
    TemperatureRangeType

"""
struct TemperatureRangeType
    minimum::TemperatureType
    maximum::TemperatureType

    function TemperatureRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    ColorType

    ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC.
"""
struct ColorType
    unit::ColorUnitType
    value::Float64

    function ColorType(;unit, value)
        return new(unit, value)
    end
end


"""
    VolumeType

"""
struct VolumeType
    unit::VolumeUnitType
    value::Float64

    function VolumeType(;unit, value)
        return new(unit, value)
    end
end


"""
    TemperatureType

"""
struct TemperatureType
    unit::TemperatureUnitType
    value::Float64

    function TemperatureType(;unit, value)
        return new(unit, value)
    end
end


"""
    SpecificVolumeType

    Specific volume is the inverse of density, with units of volume over mass, ie qt/lb or L/kg. Commonly used for mash thickness.
"""
struct SpecificVolumeType
    unit::SpecificVolumeUnitType
    value::Float64

    function SpecificVolumeType(;unit, value)
        return new(unit, value)
    end
end


"""
    VersionType

"""
struct VersionType

    function VersionType(;)
        return new()
    end
end


"""
    ColorUnitType

"""
struct ColorUnitType

    function ColorUnitType(;)
        return new()
    end
end


"""
    CarbonationRangeType

"""
struct CarbonationRangeType
    minimum::CarbonationType
    maximum::CarbonationType

    function CarbonationRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    ConcentrationUnitType

"""
struct ConcentrationUnitType

    function ConcentrationUnitType(;)
        return new()
    end
end


"""
    TimeType

"""
struct TimeType
    unit::TimeUnitType
    value::Int64

    function TimeType(;unit, value)
        return new(unit, value)
    end
end


"""
    TimeUnitType

"""
struct TimeUnitType

    function TimeUnitType(;)
        return new()
    end
end


"""
    ColorRangeType

"""
struct ColorRangeType
    minimum::ColorType
    maximum::ColorType

    function ColorRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    ViscosityUnitType

"""
struct ViscosityUnitType

    function ViscosityUnitType(;)
        return new()
    end
end


"""
    GravityUnitType

"""
struct GravityUnitType

    function GravityUnitType(;)
        return new()
    end
end


"""
    PercentRangeType

"""
struct PercentRangeType
    minimum::PercentType
    maximum::PercentType

    function PercentRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    PercentUnitType

"""
struct PercentUnitType

    function PercentUnitType(;)
        return new()
    end
end


"""
    AcidityType

"""
struct AcidityType
    unit::AcidityUnitType
    value::Float64

    function AcidityType(;unit, value)
        return new(unit, value)
    end
end


"""
    MassType

"""
struct MassType
    unit::MassUnitType
    value::Float64

    function MassType(;unit, value)
        return new(unit, value)
    end
end


"""
    DensityUnitType

"""
struct DensityUnitType

    function DensityUnitType(;)
        return new()
    end
end


"""
    DateType

"""
struct DateType

    function DateType(;)
        return new()
    end
end


"""
    PressureType

"""
struct PressureType
    unit::PressureUnitType
    value::Float64

    function PressureType(;unit, value)
        return new(unit, value)
    end
end


"""
    SpecificHeatType

    Specific heat is the measurement of the amount of heat required to raise a given mass one degree..
"""
struct SpecificHeatType
    unit::SpecificHeatUnitType
    value::Float64

    function SpecificHeatType(;unit, value)
        return new(unit, value)
    end
end


"""
    GravityRangeType

"""
struct GravityRangeType
    minimum::GravityType
    maximum::GravityType

    function GravityRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    SpecificVolumeUnitType

"""
struct SpecificVolumeUnitType

    function SpecificVolumeUnitType(;)
        return new()
    end
end


"""
    CarbonationUnitType

"""
struct CarbonationUnitType

    function CarbonationUnitType(;)
        return new()
    end
end


"""
    SpecificHeatUnitType

"""
struct SpecificHeatUnitType

    function SpecificHeatUnitType(;)
        return new()
    end
end


"""
    UnitType

    UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet.
"""
struct UnitType
    unit::UnitUnitType
    value::Float64

    function UnitType(;unit, value)
        return new(unit, value)
    end
end


"""
    DiastaticPowerType

    Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts.
"""
struct DiastaticPowerType
    unit::DiastaticPowerUnitType
    value::Float64

    function DiastaticPowerType(;unit, value)
        return new(unit, value)
    end
end


"""
    BitternessRangeType

"""
struct BitternessRangeType
    minimum::BitternessType
    maximum::BitternessType

    function BitternessRangeType(;minimum, maximum)
        return new(minimum, maximum)
    end
end


"""
    PressureUnitType

"""
struct PressureUnitType

    function PressureUnitType(;)
        return new()
    end
end


"""
    UnitUnitType

"""
struct UnitUnitType

    function UnitUnitType(;)
        return new()
    end
end


"""
    ConcentrationType

    Examples for concentration include ppm, ppb, and mg/l. 
"""
struct ConcentrationType
    unit::ConcentrationUnitType
    value::Float64

    function ConcentrationType(;unit, value)
        return new(unit, value)
    end
end


"""
    MassUnitType

"""
struct MassUnitType

    function MassUnitType(;)
        return new()
    end
end


"""
    VolumeUnitType

"""
struct VolumeUnitType

    function VolumeUnitType(;)
        return new()
    end
end


"""
    CarbonationType

"""
struct CarbonationType
    unit::CarbonationUnitType
    value::Float64

    function CarbonationType(;unit, value)
        return new(unit, value)
    end
end


"""
    PercentType

"""
struct PercentType
    unit::PercentUnitType
    value::Float64

    function PercentType(;unit, value)
        return new(unit, value)
    end
end


"""
    AcidityUnitType

"""
struct AcidityUnitType

    function AcidityUnitType(;)
        return new()
    end
end


"""
    BitternessType

"""
struct BitternessType
    unit::BitternessUnitType
    value::Float64

    function BitternessType(;unit, value)
        return new(unit, value)
    end
end


"""
    GravityType

    Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity.
"""
struct GravityType
    unit::GravityUnitType
    value::Float64

    function GravityType(;unit, value)
        return new(unit, value)
    end
end


"""
    DiastaticPowerUnitType

"""
struct DiastaticPowerUnitType

    function DiastaticPowerUnitType(;)
        return new()
    end
end


"""
    QualitativeRangeType

"""
struct QualitativeRangeType

    function QualitativeRangeType(;)
        return new()
    end
end


"""
    BitternessUnitType

"""
struct BitternessUnitType

    function BitternessUnitType(;)
        return new()
    end
end


"""
    ViscosityType

    Viscosity of fluids
"""
struct ViscosityType
    unit::ViscosityUnitType
    value::Float64

    function ViscosityType(;unit, value)
        return new(unit, value)
    end
end


"""
    EquipmentBase

    The descriptive base type for brew day equipment. Provides unique properties to fully describe the recipe.
"""
struct EquipmentBase
    name::String
    # Depends on VolumeType from measureable_units.json
    maximum_volume::VolumeType
    type::Union{Nothing, String}
    form::String

    function EquipmentBase(;name, maximum_volume, type, form)
        return new(name, maximum_volume, type, form)
    end
end


"""
    EquipmentItemType

    EquipmentType provides necessary information for individual brewing equipment.

    Fields:
    `weight`: The weight of the piece of equipment, especially important for when the mashtun is not preheated.
    `grain_absorption_rate`: The apparent volume absorbed by grain, typical values are 0.125 qt/lb (1.04 L/kg) for a mashtun, 0.08 gal/lb (0.66 L/kg) for BIAB.
    `boil_rate_per_hour`: The volume boiled off during 1 hour, measured before and after at room temperature.
    `specific_heat`: The specific heat of the piece of equipment, expressed in Cal/(g*C), especially important for when the mashtun is not preheated.
    `drain_rate_per_minute`: The volume that leaves the kettle, especially important for non-immersion chillers that cool the wort as it leaves the kettle.
"""
struct EquipmentItemType
    # Depends on MassType from measureable_units.json
    weight::Union{Nothing, MassType}
    # Depends on SpecificVolumeType from measureable_units.json
    grain_absorption_rate::Union{Nothing, SpecificVolumeType}
    # Depends on VolumeType from measureable_units.json
    boil_rate_per_hour::Union{Nothing, VolumeType}
    notes::Union{Nothing, String}
    # Depends on SpecificHeatType from measureable_units.json
    specific_heat::Union{Nothing, SpecificHeatType}
    # Depends on VolumeType from measureable_units.json
    loss::VolumeType
    # Depends on VolumeType from measureable_units.json
    drain_rate_per_minute::Union{Nothing, VolumeType}

    function EquipmentItemType(;weight, grain_absorption_rate, boil_rate_per_hour, notes, specific_heat, loss, drain_rate_per_minute)
        return new(weight, grain_absorption_rate, boil_rate_per_hour, notes, specific_heat, loss, drain_rate_per_minute)
    end
end


"""
    EquipmentType

    Provides necessary information for brewing equipment set.

    Fields:
"""
struct EquipmentType
    name::String
    equipment_items::Vector{EquipmentItemType}

    function EquipmentType(;name, equipment_items)
        return new(name, equipment_items)
    end
end


"""
    PackagingProcedureType

    Describes the procedure for packaging your beverage.
"""
struct PackagingProcedureType
    name::String
    # Depends on VolumeType from measureable_units.json
    packaged_volume::Union{Nothing, VolumeType}
    packaging_vessels::Union{Nothing, Vector{PackagingVesselType}}
    notes::Union{Nothing, String}
    description::Union{Nothing, String}

    function PackagingProcedureType(;name, packaged_volume, packaging_vessels, notes, description)
        return new(name, packaged_volume, packaging_vessels, notes, description)
    end
end


"""
    RootTypeBeerjson

    Root element of all beerjson documents.

    Fields:
    `fermentations`: A collection of steps providing process information for common fermentation procedures.
    `packaging`: A collection of steps providing process information for common packaging procedures.
    `equipments`: Provides necessary information for brewing equipment.
    `miscellaneous_ingredients`: Records for adjuncts which do not contribute to the gravity of the beer.
    `hop_varieties`: Records detailing the many properties of unique hop varieties.
    `styles`: Records detailing the characteristics of the beer styles for which judging guidelines have been established.
    `boil`: A collection of steps providing process information for common boil procedures.
    `fermentables`: Records for any ingredient that contributes to the gravity of the beer.
    `version`: Explicitly encode beerjson version within list of records.
    `timing_object`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
    `recipes`: Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer.
    `profiles`: Records for water profiles used in brewing.
    `cultures`: Records detailing the wide array of unique cultures.
    `mashes`: A collection of steps providing process information for common mashing procedures.
"""
struct RootTypeBeerjson
    fermentations::Union{Nothing, Vector{FermentationProcedureType}}
    packaging::Union{Nothing, Vector{PackagingProcedureType}}
    equipments::Union{Nothing, Vector{EquipmentType}}
    miscellaneous_ingredients::Union{Nothing, Vector{MiscellaneousType}}
    hop_varieties::Union{Nothing, Vector{VarietyInformation}}
    styles::Union{Nothing, Vector{StyleType}}
    boil::Union{Nothing, Vector{BoilProcedureType}}
    fermentables::Union{Nothing, Vector{FermentableType}}
    # Depends on VersionType from measureable_units.json
    version::VersionType
    # Depends on TimingType from timing.json
    timing_object::Union{Nothing, TimingType}
    recipes::Union{Nothing, Vector{RecipeType}}
    profiles::Union{Nothing, Vector{WaterBase}}
    cultures::Union{Nothing, Vector{CultureInformation}}
    mashes::Union{Nothing, Vector{MashProcedureType}}

    function RootTypeBeerjson(;fermentations, packaging, equipments, miscellaneous_ingredients, hop_varieties, styles, boil, fermentables, version, timing_object, recipes, profiles, cultures, mashes)
        return new(fermentations, packaging, equipments, miscellaneous_ingredients, hop_varieties, styles, boil, fermentables, version, timing_object, recipes, profiles, cultures, mashes)
    end
end


"""
    RootType


    Fields:
    `beerjson`: Root element of all beerjson documents.
"""
struct RootType
    beerjson::RootTypeBeerjson

    function RootType(;beerjson)
        return new(beerjson)
    end
end


