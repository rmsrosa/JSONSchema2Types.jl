# This file was programmatically generated from JSON Schemas.
# Generated on: 2025-10-04T13:39:51.156
# Do not edit this file directly.

using Dates, URIs, UUIDs

"""
    PaymentStatus

    The status of a payment, defined as a reusable component.
"""
struct PaymentStatus

    function PaymentStatus(;)
        return new()
    end
end


"""
    ComplexEnumExampleOrderStatus

    The current status of the entire order.

    Fields:
    `priority`: The priority level of the order.
"""
struct ComplexEnumExampleOrderStatus
    priority::Int64
    payment_status::PaymentStatus

    function ComplexEnumExampleOrderStatus(;priority, payment_status)
        return new(priority, payment_status)
    end
end


"""
    ComplexEnumExampleProduct

    A product with a nested shipping status.

    Fields:
    `shipping_status`: The current shipping status of the product.
"""
struct ComplexEnumExampleProduct
    shipping_status::String
    id::String

    function ComplexEnumExampleProduct(;shipping_status, id)
        return new(shipping_status, id)
    end
end


"""
    ComplexEnumExample

    An example schema to test deeply nested enumerated types within objects and references.

    Fields:
    `order_status`: The current status of the entire order.
    `mixed_enum_test`: An intentionally mixed-type enum to test union type generation.
    `product`: A product with a nested shipping status.
"""
struct ComplexEnumExample
    order_status::ComplexEnumExampleOrderStatus
    mixed_enum_test::Any
    product::ComplexEnumExampleProduct

    function ComplexEnumExample(;order_status, mixed_enum_test, product)
        return new(order_status, mixed_enum_test, product)
    end
end
