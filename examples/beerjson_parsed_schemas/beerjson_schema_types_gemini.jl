# This file was programmatically generated from JSON Schemas.
# Generated on: 2025-09-23T22:15:29.710
# Do not edit this file directly.

# The field `pre_boil_size` in this struct depends on a type `VolumeType` from `measureable_units.json`
# The field `boil_time` in this struct depends on a type `TimeType` from `measureable_units.json`
"""
    BoilProcedureType

BoilProcedureType defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil.
"""
struct BoilProcedureType
    name::Union{Nothing, String}
    boil_time::TimeType
    notes::Union{Nothing, String}
    pre_boil_size::Union{Nothing, VolumeType}
    description::Union{Nothing, String}
    boil_steps::Union{Nothing, Vector{BoilStepType}}
end

# The field `specific_gravity` in this struct depends on a type `GravityType` from `measureable_units.json`
# The field `pH` in this struct depends on a type `AcidityType` from `measureable_units.json`
# The field `time` in this struct depends on a type `TimeType` from `measureable_units.json`
# The field `duration` in this struct depends on a type `TimeType` from `measureable_units.json`
"""
    TimingType

The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.

Fields:
    `duration`: How long an ingredient addition remains, this was referred to as time in the BeerXML standard. E.G. A 40 minute hop boil additions means to boil for 40 minutes, and a 2 day duration for a dry hop means to remove it after 2 days.
    `step`: Used to indicate what step this ingredient timing addition is referencing. EG A value of 2 for add_to_fermentation would mean to add during the second fermentation step.
    `time`: What time during a process step is added, eg a value of 2 days for a dry hop addition would be added 2 days into the fermentation step.
    `pH`: Used to indicate when an addition is added based on a desired specific gravity. eg Add brett when pH is 3.4.
    `continuous`: A continuous addition is spread out evenly and added during the entire process step, eg 60 minute IPA by dogfish head takes all ofthe hop additions and adds them throughout the entire boil.
    `specific_gravity`: Used to indicate when an addition is added based on a desired specific gravity. E.G. Add dry hop at when SG is 1.018.

"""
struct TimingType
    duration::Union{Nothing, TimeType}
    step::Union{Nothing, Int64}
    time::Union{Nothing, TimeType}
    use::Union{Nothing, UseType}
    pH::Union{Nothing, AcidityType}
    continuous::Union{Nothing, Bool}
    specific_gravity::Union{Nothing, GravityType}
end


# The field `conversion` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `mash` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `brewhouse` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `lauter` in this struct depends on a type `PercentType` from `measureable_units.json`
"""
    EfficiencyType

The efficiencyType stores each efficiency component.

Fields:
    `lauter`: The percentage of sugar that makes it from the mash tun to the kettle.
    `brewhouse`: The percentage of sugar that makes it from the grain to the fermenter.
    `mash`: The percentage of sugar that makes it from the grain to the kettle.
    `conversion`: The percentage of sugar from the grain yield that is extracted and converted during the mash.

"""
struct EfficiencyType
    lauter::Union{Nothing, PercentType}
    brewhouse::PercentType
    mash::Union{Nothing, PercentType}
    conversion::Union{Nothing, PercentType}
end

"""
    IngredientsType



Fields:
    `miscellaneous_additions`: miscellaneous_additions collects all the miscellaneous items for use in a recipe
    `water_additions`: water_additions collects all the water items for use in a recipe
    `hop_additions`: hop_additions collects all the hops for use in a recipe
    `culture_additions`: culture_additions collects all the culture items for use in a recipe
    `fermentable_additions`: fermentable_additions collects all the fermentable ingredients for use in a recipe

"""
struct IngredientsType
    miscellaneous_additions::Union{Nothing, Vector{MiscellaneousAdditionType}}
    water_additions::Union{Nothing, Vector{WaterAdditionType}}
    hop_additions::Union{Nothing, Vector{HopAdditionType}}
    culture_additions::Union{Nothing, Vector{CultureAdditionType}}
    fermentable_additions::Vector{FermentableAdditionType}
end

# The field `original_gravity` in this struct depends on a type `GravityType` from `measureable_units.json`
# The field `apparent_attenuation` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `beer_pH` in this struct depends on a type `AcidityType` from `measureable_units.json`
# The field `style` in this struct depends on a type `RecipeStyleType` from `style.json`
# The field `color_estimate` in this struct depends on a type `ColorType` from `measureable_units.json`
# The field `ibu_estimate` in this struct depends on a type `IBUEstimateType` from `hop.json`
# The field `created` in this struct depends on a type `DateType` from `measureable_units.json`
# The field `final_gravity` in this struct depends on a type `GravityType` from `measureable_units.json`
# The field `boil` in this struct depends on a type `BoilProcedureType` from `boil.json`
# The field `packaging` in this struct depends on a type `PackagingProcedureType` from `packaging.json`
# The field `mash` in this struct depends on a type `MashProcedureType` from `mash.json`
# The field `alcohol_by_volume` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `batch_size` in this struct depends on a type `VolumeType` from `measureable_units.json`
# The field `fermentation` in this struct depends on a type `FermentationProcedureType` from `fermentation.json`
"""
    RecipeType

RecipeType composes the information stored in a beerjson recipe.

Fields:
    `fermentation`: FermentationProcedureType defines the procedure for performing fermentation.
    `batch_size`: The volume into the fermenter.
    `mash`: This defines the procedure for performing unique mashing processes.
    `packaging`: Describes the procedure for packaging your beverage.
    `boil`: Defines the procedure for performing a boil. A boil procedure with no steps is the same as a standard single step boil.
    `final_gravity`: The gravity of beer at the end of fermentation.
    `ibu_estimate`: Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency.
    `color_estimate`: The color of the finished beer, using SRM or EBC.
    `carbonation`: The final carbonation of the beer when packaged or served.
    `beer_pH`: The final beer pH at the end of fermentation.
    `apparent_attenuation`: The total apparent attenuation of the finished beer after fermentation.
    `efficiency`: Used to store each efficiency component, including conversion, and brewhouse.
    `taste`: Used to store subjective tasting notes, and rating.
    `ingredients`: A collection of all ingredients used for the recipe.
    `original_gravity`: The gravity of wort when transffered to the fermenter.

"""
struct RecipeType
    fermentation::Union{Nothing, FermentationProcedureType}
    batch_size::VolumeType
    alcohol_by_volume::Union{Nothing, PercentType}
    mash::Union{Nothing, MashProcedureType}
    packaging::Union{Nothing, PackagingProcedureType}
    name::String
    author::String
    boil::Union{Nothing, BoilProcedureType}
    final_gravity::Union{Nothing, GravityType}
    notes::Union{Nothing, String}
    created::Union{Nothing, DateType}
    ibu_estimate::Union{Nothing, IBUEstimateType}
    calories_per_pint::Union{Nothing, Float64}
    color_estimate::Union{Nothing, ColorType}
    style::Union{Nothing, RecipeStyleType}
    carbonation::Union{Nothing, Float64}
    beer_pH::Union{Nothing, AcidityType}
    coauthor::Union{Nothing, String}
    apparent_attenuation::Union{Nothing, PercentType}
    efficiency::EfficiencyType
    taste::Union{Nothing, TasteType}
    ingredients::IngredientsType
    original_gravity::Union{Nothing, GravityType}
    type::String
end

"""
    TasteType


"""
struct TasteType
    rating::Float64
    notes::String
end


"""
    StyleBase

The descriptive base type for both style guideline records, and recipe style provisions. Provides unique properties to identify individual styles
"""
struct StyleBase
    name::String
    category_number::Union{Nothing, Int64}
    style_letter::Union{Nothing, String}
    style_guide::String
    category::String
    type::StyleCategories
end

"""
    RecipeStyleType

RecipeStyleType defines style information stored in a recipe record
"""
struct RecipeStyleType
end

"""
    StyleType

StyleType provide information for Style categorization
"""
struct StyleType
end

"""
    MiscellaneousInventoryType


"""
struct MiscellaneousInventoryType
    amount::Any
end

"""
    MiscellaneousBase

MiscellaneousBase provides unique properties to identify individual records of ingredients that are neither hops, nor provide a contribution to the gravity of wort.
"""
struct MiscellaneousBase
    product_id::Union{Nothing, String}
    name::String
    producer::Union{Nothing, String}
    type::String
end

"""
    MiscellaneousAdditionType

MiscellaneousAdditionType collects the attributes of each miscellaneous ingredient for use in a recipe.
"""
struct MiscellaneousAdditionType
end

"""
    MiscellaneousType

MiscellaneousType collects the attributes of an ingredient to store as record information.
"""
struct MiscellaneousType
end

# The field `color` in this struct depends on a type `ColorType` from `measureable_units.json`
"""
    FermentableBase

FermentableBase provides unique properties to identify individual records of fermentable ingredients.
"""
struct FermentableBase
    product_id::Union{Nothing, String}
    name::String
    yield::YieldType
    grain_group::Union{Nothing, String}
    producer::Union{Nothing, String}
    color::ColorType
    type::String
    origin::Union{Nothing, String}
end

# The field `coarse_grind` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `fine_grind` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `potential` in this struct depends on a type `GravityType` from `measureable_units.json`
# The field `fine_coarse_difference` in this struct depends on a type `PercentType` from `measureable_units.json`
"""
    YieldType

The potential yield of the fermentable ingredient, supporting SG, or percentage. eg 1.037 or 80% are valid yield types.

Fields:
    `fine_coarse_difference`: The difference between fine and coarse grind, a difference more than 2 percent can indicate a protein or step mash may be desirable. eg 2%.
    `potential`: The potential yield of the fermentable ingredient for 1 lb of grain mashed in 1 gallon of water. eg 1.037
    `fine_grind`: Percentage yield compared to succrose of a fine grind. eg 80%
    `coarse_grind`: Percentage yield compared to succrose of a coarse grind. eg 78%

"""
struct YieldType
    fine_coarse_difference::Union{Nothing, PercentType}
    potential::Union{Nothing, GravityType}
    fine_grind::Union{Nothing, PercentType}
    coarse_grind::Union{Nothing, PercentType}
end

"""
    FermentableInventoryType


"""
struct FermentableInventoryType
    amount::Union{Nothing, Any}
end

"""
    FermentableType

FermentableType collects the attributes of a fermentable ingredient to store as record information.
"""
struct FermentableType
end

"""
    FermentableAdditionType

FermentableAdditionType collects the attributes of each fermentable ingredient for use in a recipe fermentable bill.
"""
struct FermentableAdditionType
end

# The field `slant` in this struct depends on a type `VolumeType` from `measureable_units.json`
# The field `dry` in this struct depends on a type `MassType` from `measureable_units.json`
# The field `liquid` in this struct depends on a type `VolumeType` from `measureable_units.json`
# The field `culture` in this struct depends on a type `VolumeType` from `measureable_units.json`
"""
    CultureInventoryType


"""
struct CultureInventoryType
    culture::Union{Nothing, VolumeType}
    liquid::Union{Nothing, VolumeType}
    dry::Union{Nothing, MassType}
    slant::Union{Nothing, VolumeType}
end

"""
    CultureInformation

CultureInformation collects the attributes of a microbial culture.
"""
struct CultureInformation
end

"""
    Zymocide

Zymocide, also known as killer yeast properties, is common among wine yeast. There are also some ale and brett yeasts that are immune to some zymocidic properties, these are known as killer neutral.
"""
struct Zymocide
    no1::Union{Nothing, Bool}
    no28::Union{Nothing, Bool}
    no2::Union{Nothing, Bool}
    klus::Union{Nothing, Bool}
    neutral::Union{Nothing, Bool}
end

"""
    CultureBase

Provides unique properties to identify individual records of a culture.
"""
struct CultureBase
    product_id::Union{Nothing, String}
    name::String
    producer::Union{Nothing, String}
    type::String
    form::String
end

"""
    CultureAdditionType

CultureAdditionType collects the attributes of each culture ingredient for use in a recipe.
"""
struct CultureAdditionType
end

# The field `potassium` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `flouride` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `chloride` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `carbonate` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `calcium` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `sulfate` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `nitrite` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `nitrate` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `iron` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `sodium` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `magnesium` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
# The field `bicarbonate` in this struct depends on a type `ConcentrationType` from `measureable_units.json`
"""
    WaterBase

WaterBase provides unique properties to identify individual records of  brewing water.
"""
struct WaterBase
    bicarbonate::ConcentrationType
    magnesium::ConcentrationType
    sodium::ConcentrationType
    iron::Union{Nothing, ConcentrationType}
    name::String
    nitrate::Union{Nothing, ConcentrationType}
    nitrite::Union{Nothing, ConcentrationType}
    sulfate::ConcentrationType
    calcium::ConcentrationType
    producer::Union{Nothing, String}
    carbonate::Union{Nothing, ConcentrationType}
    chloride::ConcentrationType
    flouride::Union{Nothing, ConcentrationType}
    potassium::Union{Nothing, ConcentrationType}
end

"""
    WaterAdditionType

WaterAdditionType collects the attributes of each water addition for use in a recipe
"""
struct WaterAdditionType
end

"""
    WaterType

WaterType collects the attributes of a brewing water to store as record information
"""
struct WaterType
end

"""
    FermentationProcedureType

FermentationProcedureType defines the procedure for performing fermentation.
"""
struct FermentationProcedureType
    name::String
    fermentation_steps::Vector{FermentationStepType}
    notes::Union{Nothing, String}
    description::Union{Nothing, String}
end

# The field `grain_temperature` in this struct depends on a type `TemperatureType` from `measureable_units.json`
"""
    MashProcedureType

This defines the procedure for performing unique mashing processes.

Fields:
    `grain_temperature`: Initial grain temperature prior to the start of the mash.

"""
struct MashProcedureType
    name::String
    grain_temperature::TemperatureType
    mash_steps::Vector{MashStepType}
    notes::Union{Nothing, String}
end

"""
    VarietyInformation

VarietyInformation collects the attributes of a hop variety to store as record information.
"""
struct VarietyInformation
end

"""
    HopInventoryType


"""
struct HopInventoryType
    amount::Union{Nothing, Any}
end

# The field `pinene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `caryophyllene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `xanthohumol` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `b_pinene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `limonene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `cohumulone` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `nerol` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `polyphenols` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `humulene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `farnesene` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `linalool` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `geraniol` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `myrcene` in this struct depends on a type `PercentType` from `measureable_units.json`
"""
    OilContentType

oil_content collects all information of a hop variety pertaining to oil content, polyphenols, and thiols. Each individual compound is expressed as a percent of the total oil measurement.

Fields:
    `total_oil_ml_per_100g`: The total amount of oil, including hydrocarbons, esters, and terpene alcohols in units of ml of oil per 100g of hop mass.

"""
struct OilContentType
    total_oil_ml_per_100g::Union{Nothing, Float64}
    myrcene::Union{Nothing, PercentType}
    geraniol::Union{Nothing, PercentType}
    linalool::Union{Nothing, PercentType}
    farnesene::Union{Nothing, PercentType}
    humulene::Union{Nothing, PercentType}
    polyphenols::Union{Nothing, PercentType}
    nerol::Union{Nothing, PercentType}
    cohumulone::Union{Nothing, PercentType}
    limonene::Union{Nothing, PercentType}
    b_pinene::Union{Nothing, PercentType}
    xanthohumol::Union{Nothing, PercentType}
    caryophyllene::Union{Nothing, PercentType}
    pinene::Union{Nothing, PercentType}
end


"""
    HopAdditionType

HopAdditionType collects the attributes of each hop ingredient for use in a recipe hop bil.
"""
struct HopAdditionType
end

# The field `beta_acid` in this struct depends on a type `PercentType` from `measureable_units.json`
# The field `alpha_acid` in this struct depends on a type `PercentType` from `measureable_units.json`
"""
    HopVarietyBase

HopVarietyBase provides unique properties to identify individual records of a hop variety.
"""
struct HopVarietyBase
    product_id::Union{Nothing, String}
    name::String
    alpha_acid::PercentType
    year::Union{Nothing, String}
    producer::Union{Nothing, String}
    beta_acid::Union{Nothing, PercentType}
    form::Union{Nothing, String}
    origin::Union{Nothing, String}
end

"""
    IBUEstimateType

Used to differentiate which IBU formula is being used in a recipe. If formula is modified in any way, eg to support whirlpool/flameout additions etc etc, please use `Other` for transparency.
"""
struct IBUEstimateType
    method::Union{Nothing, IBUMethodType}
end


"""
    TemperatureRangeType


"""
struct TemperatureRangeType
    minimum::TemperatureType
    maximum::TemperatureType
end

"""
    ColorType

ColorType supports both grain color properties, such as Lovibond, and wort color properties such as SRM and EBC.
"""
struct ColorType
    unit::ColorUnitType
    value::Float64
end

"""
    VolumeType


"""
struct VolumeType
    unit::VolumeUnitType
    value::Float64
end

"""
    TemperatureType


"""
struct TemperatureType
    unit::TemperatureUnitType
    value::Float64
end

"""
    SpecificVolumeType

Specific volume is the inverse of density, with units of volume over mass, ie qt/lb or L/kg. Commonly used for mash thickness.
"""
struct SpecificVolumeType
    unit::SpecificVolumeUnitType
    value::Float64
end



"""
    CarbonationRangeType


"""
struct CarbonationRangeType
    minimum::CarbonationType
    maximum::CarbonationType
end


"""
    TimeType


"""
struct TimeType
    unit::TimeUnitType
    value::Int64
end


"""
    ColorRangeType


"""
struct ColorRangeType
    minimum::ColorType
    maximum::ColorType
end



"""
    PercentRangeType


"""
struct PercentRangeType
    minimum::PercentType
    maximum::PercentType
end


"""
    AcidityType


"""
struct AcidityType
    unit::AcidityUnitType
    value::Float64
end

"""
    MassType


"""
struct MassType
    unit::MassUnitType
    value::Float64
end



"""
    PressureType


"""
struct PressureType
    unit::PressureUnitType
    value::Float64
end

"""
    SpecificHeatType

Specific heat is the measurement of the amount of heat required to raise a given mass one degree..
"""
struct SpecificHeatType
    unit::SpecificHeatUnitType
    value::Float64
end

"""
    GravityRangeType


"""
struct GravityRangeType
    minimum::GravityType
    maximum::GravityType
end




"""
    UnitType

UnitType is used where unitless amounts are required, such as 1 apple, or 1 yeast packet.
"""
struct UnitType
    unit::UnitUnitType
    value::Float64
end

"""
    DiastaticPowerType

Diastatic power is a measurement of malted grains enzymatic content. A value of 35 Lintner is needed to self convert, while a value of 100 or more is desirable for base malts.
"""
struct DiastaticPowerType
    unit::DiastaticPowerUnitType
    value::Float64
end

"""
    BitternessRangeType


"""
struct BitternessRangeType
    minimum::BitternessType
    maximum::BitternessType
end



"""
    ConcentrationType

Examples for concentration include ppm, ppb, and mg/l. 
"""
struct ConcentrationType
    unit::ConcentrationUnitType
    value::Float64
end



"""
    CarbonationType


"""
struct CarbonationType
    unit::CarbonationUnitType
    value::Float64
end

"""
    PercentType


"""
struct PercentType
    unit::PercentUnitType
    value::Float64
end


"""
    BitternessType


"""
struct BitternessType
    unit::BitternessUnitType
    value::Float64
end

"""
    GravityType

Gravity refers to the both the measurements of percent of sugar content, ie plato and brix, as well as relative density ie specific gravity.
"""
struct GravityType
    unit::GravityUnitType
    value::Float64
end




"""
    ViscosityType

Viscosity of fluids
"""
struct ViscosityType
    unit::ViscosityUnitType
    value::Float64
end

# The field `maximum_volume` in this struct depends on a type `VolumeType` from `measureable_units.json`
"""
    EquipmentBase

The descriptive base type for brew day equipment. Provides unique properties to fully describe the recipe.
"""
struct EquipmentBase
    name::String
    maximum_volume::VolumeType
    type::Union{Nothing, String}
    form::String
end

"""
    EquipmentItemType

EquipmentType provides necessary information for individual brewing equipment.
"""
struct EquipmentItemType
end

"""
    EquipmentType

Provides necessary information for brewing equipment set.

Fields:

"""
struct EquipmentType
    name::String
    equipment_items::Vector{EquipmentItemType}
end

# The field `packaged_volume` in this struct depends on a type `VolumeType` from `measureable_units.json`
"""
    PackagingProcedureType

Describes the procedure for packaging your beverage.
"""
struct PackagingProcedureType
    name::String
    packaged_volume::Union{Nothing, VolumeType}
    packaging_vessels::Union{Nothing, Vector{PackagingVesselType}}
    notes::Union{Nothing, String}
    description::Union{Nothing, String}
end

# The field `timing_object` in this struct depends on a type `TimingType` from `timing.json`
# The field `version` in this struct depends on a type `VersionType` from `measureable_units.json`
"""
    Beerjson

Root element of all beerjson documents.

Fields:
    `fermentations`: A collection of steps providing process information for common fermentation procedures.
    `packaging`: A collection of steps providing process information for common packaging procedures.
    `equipments`: Provides necessary information for brewing equipment.
    `miscellaneous_ingredients`: Records for adjuncts which do not contribute to the gravity of the beer.
    `hop_varieties`: Records detailing the many properties of unique hop varieties.
    `styles`: Records detailing the characteristics of the beer styles for which judging guidelines have been established.
    `boil`: A collection of steps providing process information for common boil procedures.
    `fermentables`: Records for any ingredient that contributes to the gravity of the beer.
    `version`: Explicitly encode beerjson version within list of records.
    `timing_object`: The timing object fully describes the timing of an addition with options for basis on time, gravity, or pH at any process step.
    `recipes`: Records containing a minimal collection of the description of ingredients, procedures and other required parameters necessary to recreate a batch of beer.
    `profiles`: Records for water profiles used in brewing.
    `cultures`: Records detailing the wide array of unique cultures.
    `mashes`: A collection of steps providing process information for common mashing procedures.

"""
struct Beerjson
    fermentations::Union{Nothing, Vector{FermentationProcedureType}}
    packaging::Union{Nothing, Vector{PackagingProcedureType}}
    equipments::Union{Nothing, Vector{EquipmentType}}
    miscellaneous_ingredients::Union{Nothing, Vector{MiscellaneousType}}
    hop_varieties::Union{Nothing, Vector{VarietyInformation}}
    styles::Union{Nothing, Vector{StyleType}}
    boil::Union{Nothing, Vector{BoilProcedureType}}
    fermentables::Union{Nothing, Vector{FermentableType}}
    version::VersionType
    timing_object::Union{Nothing, TimingType}
    recipes::Union{Nothing, Vector{RecipeType}}
    profiles::Union{Nothing, Vector{WaterBase}}
    cultures::Union{Nothing, Vector{CultureInformation}}
    mashes::Union{Nothing, Vector{MashProcedureType}}
end

"""
    Schema



Fields:
    `beerjson`: Root element of all beerjson documents.

"""
struct Schema
    beerjson::Beerjson
end
